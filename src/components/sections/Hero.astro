---
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";
import ByNumber from "./ByNumber.astro";
// Remove the import of THREE from the frontmatter
---
<section class="relative pt-32 lg:pt-36 overflow-hidden ">
  <!-- Background with Blockchain Patterns -->
  <div class="absolute inset-0 -z-20">
    <!-- Canvas for background patterns -->
    <canvas id="backgroundCanvas" class="w-full h-full"></canvas>
  </div>

  <Container class="flex flex-col sm:flex-row items-center lg:items-start gap-10 lg:gap-12 relative z-10 bg-black">
    <!-- Left Column: Content -->
    <div class="flex flex-col items-center text-center lg:text-left lg:items-start lg:flex-1 lg:w-1/2">
      <!-- Headline with Fixed Height -->
      <h1 class="text-4xl sm:text-5xl md:text-6xl xl:text-7xl font-extrabold text-transparent bg-clip-text bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 animate-gradient" style="min-height: 200px;">
        <span id="typedText" class="block"></span>
      </h1>
      <!-- Paragraph -->
      <Paragraph class="mt-8 text-lg md:text-xl text-gray-200">
        Empowering your business with cutting-edge blockchain solutions. Join us in revolutionizing the future of technology.
      </Paragraph>
      <!-- Call to Action Form -->
      <div class="mt-10 w-full max-w-md">
        <form id="emailForm" action="#" class="relative">
          <div class="flex items-center bg-white bg-opacity-10 backdrop-filter backdrop-blur-lg rounded-full pl-6 pr-1 py-1 shadow-lg">
            <span class="text-gray-300">
              <!-- Email Icon -->
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M16 12H8m0 0l4-4m-4 4l4 4" />
              </svg>
            </span>
            <input type="email" id="emailInput" placeholder="Enter your email" class="w-full bg-transparent outline-none text-white placeholder-gray-400 pl-4 py-3" required />
            <Button variant="primary" className="min-w-max text-white px-6 py-3 rounded-full">
              Get Started
            </Button>
          </div>
          <!-- Success Message -->
          <p id="successMessage" class="mt-4 text-green-400 text-sm hidden">Thank you! We'll be in touch soon.</p>
        </form>
      </div>
      
    </div>

    <!-- Right Column: 3D Blockchain Globe -->
    <div class="flex flex-1 lg:w-1/2 lg:h-auto relative max-w-3xl">
        <!-- Canvas for 3D Globe -->
        <canvas id="globeCanvas" class="w-full h-full"></canvas>
      </div>
  </Container>

  <!-- Include three.js via CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <!-- Include the script within a <script> tag -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Animated Headline Typing Effect without layout shifts
      const typedText = document.getElementById('typedText');
      const phrases = ["Innovating Blockchain.", "Securing Your Future.", "Transforming Technology."];
      let currentPhraseIndex = 0;
      let charIndex = 0;
      let isDeleting = false;

      // Prevent layout shifts by setting a fixed height
      typedText.style.minHeight = '0.8em';

      function type() {
        const currentPhrase = phrases[currentPhraseIndex];
        if (isDeleting) {
          typedText.textContent = currentPhrase.substring(0, charIndex--);
          if (charIndex < 0) {
            isDeleting = false;
            currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
            setTimeout(type, 500);
          } else {
            setTimeout(type, 50);
          }
        } else {
          typedText.textContent = currentPhrase.substring(0, charIndex++);
          if (charIndex > currentPhrase.length) {
            isDeleting = true;
            setTimeout(type, 2000);
          } else {
            setTimeout(type, 100);
          }
        }
      }

      type();

      // 3D Blockchain Globe Animation
      let scene, camera, renderer, globeGroup;
      const globeCanvas = document.getElementById('globeCanvas');

      function initGlobe() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(50, globeCanvas.offsetWidth / globeCanvas.offsetHeight, 0.1, 1000);
        camera.position.z = 2;

        renderer = new THREE.WebGLRenderer({ canvas: globeCanvas, alpha: true });
        renderer.setSize(globeCanvas.offsetWidth, globeCanvas.offsetHeight);

        // Globe Group
        globeGroup = new THREE.Group();

        // Globe Geometry
        const globeGeometry = new THREE.SphereGeometry(0.8, 32, 32);
        const globeMaterial = new THREE.MeshBasicMaterial({ color: 0x222222, wireframe: true });
        const globeMesh = new THREE.Mesh(globeGeometry, globeMaterial);
        globeGroup.add(globeMesh);

        // Adding Blockchain Nodes
        const nodeGeometry = new THREE.SphereGeometry(0.02, 8, 8);
        const nodeMaterial = new THREE.MeshBasicMaterial({ color: 0xff0080 });
        for (let i = 0; i < 100; i++) {
          const nodeMesh = new THREE.Mesh(nodeGeometry, nodeMaterial);
          const phi = Math.acos(-1 + (2 * i) / 100);
          const theta = Math.sqrt(100 * Math.PI) * phi;

          nodeMesh.position.x = 0.8 * Math.cos(theta) * Math.sin(phi);
          nodeMesh.position.y = 0.8 * Math.sin(theta) * Math.sin(phi);
          nodeMesh.position.z = 0.8 * Math.cos(phi);

          globeGroup.add(nodeMesh);
        }

        scene.add(globeGroup);

        animateGlobe();
      }

      function animateGlobe() {
        requestAnimationFrame(animateGlobe);
        globeGroup.rotation.y += 0.001;
        renderer.render(scene, camera);
      }

      initGlobe();

      // Handle Window Resize
      window.addEventListener('resize', () => {
        camera.aspect = globeCanvas.offsetWidth / globeCanvas.offsetHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(globeCanvas.offsetWidth, globeCanvas.offsetHeight);
      });

      // Background Animation with Blockchain Patterns
      const backgroundCanvas = document.getElementById('backgroundCanvas');
      const bgCtx = backgroundCanvas.getContext('2d');

      function resizeBackgroundCanvas() {
        backgroundCanvas.width = backgroundCanvas.offsetWidth;
        backgroundCanvas.height = backgroundCanvas.offsetHeight;
      }

      function drawBackgroundPattern() {
        resizeBackgroundCanvas();
        bgCtx.clearRect(0, 0, backgroundCanvas.width, backgroundCanvas.height);
        bgCtx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
        const size = 40;
        for (let x = 0; x < backgroundCanvas.width; x += size) {
          for (let y = 0; y < backgroundCanvas.height; y += size) {
            bgCtx.beginPath();
            bgCtx.moveTo(x + size / 2, y);
            bgCtx.lineTo(x + size, y + size / 4);
            bgCtx.lineTo(x + size, y + (3 * size) / 4);
            bgCtx.lineTo(x + size / 2, y + size);
            bgCtx.lineTo(x, y + (3 * size) / 4);
            bgCtx.lineTo(x, y + size / 4);
            bgCtx.closePath();
            bgCtx.stroke();
          }
        }
      }

      window.addEventListener('resize', drawBackgroundPattern);
      drawBackgroundPattern();

      // Email Form Validation and Animation
      const emailForm = document.getElementById('emailForm');
      const emailInput = document.getElementById('emailInput');
      const successMessage = document.getElementById('successMessage');

      emailForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (emailInput.validity.valid) {
          successMessage.classList.remove('hidden');
          emailForm.reset();
        } else {
          emailInput.focus();
        }
      });
    });
  </script>
</section>
