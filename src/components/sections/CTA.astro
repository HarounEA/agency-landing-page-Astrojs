---
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";
---

<section id="cta" class="pb-20 relative overflow-hidden">
  <Container>
    <div
      class="w-full relative py-16 md:py-20 px-6 md:px-8 rounded-2xl bg-gradient-to-tr from-blue-900 via-gray-900 to-black text-white shadow-2xl"
    >
      <!-- Background Blockchain Animation -->
      <div class="absolute inset-0">
        <canvas id="blockchainCanvas" class="w-full h-full opacity-30"></canvas>
      </div>

      <!-- Decorative Elements -->
      <div class="absolute right-0 top-0 h-full w-full flex justify-end">
        <div class="w-40 h-40 overflow-visible flex rounded-xl relative">
          <div class="absolute inset-0 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full blur-3xl opacity-50 animate-pulse"></div>
        </div>
      </div>

      <div class="absolute left-0 bottom-0 h-full w-full flex items-end">
        <div class="w-40 h-40 overflow-visible flex rounded-xl relative">
          <div class="absolute inset-0 bg-gradient-to-br from-green-500 to-teal-500 rounded-full blur-3xl opacity-50 animate-pulse"></div>
        </div>
      </div>

      <!-- Content -->
      <div class="mx-auto text-center max-w-2xl relative z-10">
        <h1
          class="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight"
        >
          Accelerate Your <span class="text-transparent bg-clip-text bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 animate-text">Blockchain Journey</span> Today
        </h1>
        <Paragraph className="pt-8 text-lg md:text-xl">
          Join <strong>BlockReg Solutions</strong> and unlock the full potential of blockchain technology with secure, compliant, and innovative solutions tailored to your needs.
        </Paragraph>
        <div class="mx-auto max-w-md sm:max-w-xl pt-10 flex justify-center">
          <Button variant="primary" className="mr-4 hover:scale-105 transform transition">
            <span class="relative z-[5]">Get Started</span>
          </Button>
          <Button variant="secondary" className="hover:scale-105 transform transition">
            <span class="relative z-[5]">Learn More</span>
          </Button>
        </div>
      </div>
    </div>
  </Container>

  <!-- Include the blockchain animation script -->
  <script>
    // Simple blockchain network animation using Canvas API
    const canvas = document.getElementById('blockchainCanvas');
    const ctx = canvas.getContext('2d');
    let nodes = [];

    function resizeCanvas() {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    }

    function createNodes() {
      nodes = [];
      for (let i = 0; i < 50; i++) {
        nodes.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          size: Math.random() * 2 + 1,
          speedX: Math.random() * 0.5 - 0.25,
          speedY: Math.random() * 0.5 - 0.25,
        });
      }
    }

    function drawNodes() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#ffffff';
      nodes.forEach(node => {
        ctx.beginPath();
        ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);
        ctx.fill();
        node.x += node.speedX;
        node.y += node.speedY;
        if (node.x < 0 || node.x > canvas.width) node.speedX *= -1;
        if (node.y < 0 || node.y > canvas.height) node.speedY *= -1;
      });
      connectNodes();
      requestAnimationFrame(drawNodes);
    }

    function connectNodes() {
      for (let i = 0; i < nodes.length; i++) {
        for (let j = i + 1; j < nodes.length; j++) {
          const dx = nodes[i].x - nodes[j].x;
          const dy = nodes[i].y - nodes[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < 100) {
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(nodes[i].x, nodes[i].y);
            ctx.lineTo(nodes[j].x, nodes[j].y);
            ctx.stroke();
          }
        }
      }
    }

    window.addEventListener('load', () => {
      resizeCanvas();
      createNodes();
      drawNodes();
    });

    window.addEventListener('resize', () => {
      resizeCanvas();
      createNodes();
    });
  </script>
  
</section>
